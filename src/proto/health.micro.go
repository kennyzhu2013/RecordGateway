// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: invite.proto

package go_micro_api_gateway

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for MediaProxy service

type MediaProxyService interface {
	CreateSession(ctx context.Context, in *SessionRequest, opts ...client.CallOption) (*SessionResponse, error)
}

type mediaProxyService struct {
	c    client.Client
	name string
}

func NewMediaProxyService(name string, c client.Client) MediaProxyService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.api.gateway"
	}
	return &mediaProxyService{
		c:    c,
		name: name,
	}
}

func (c *mediaProxyService) CreateSession(ctx context.Context, in *SessionRequest, opts ...client.CallOption) (*SessionResponse, error) {
	req := c.c.NewRequest(c.name, "MediaProxy.CreateSession", in)
	out := new(SessionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MediaProxy service

type MediaProxyHandler interface {
	CreateSession(context.Context, *SessionRequest, *SessionResponse) error
}

func RegisterMediaProxyHandler(s server.Server, hdlr MediaProxyHandler, opts ...server.HandlerOption) {
	type mediaProxy interface {
		CreateSession(ctx context.Context, in *SessionRequest, out *SessionResponse) error
	}
	type MediaProxy struct {
		mediaProxy
	}
	h := &mediaProxyHandler{hdlr}
	s.Handle(s.NewHandler(&MediaProxy{h}, opts...))
}

type mediaProxyHandler struct {
	MediaProxyHandler
}

func (h *mediaProxyHandler) CreateSession(ctx context.Context, in *SessionRequest, out *SessionResponse) error {
	return h.MediaProxyHandler.CreateSession(ctx, in, out)
}
